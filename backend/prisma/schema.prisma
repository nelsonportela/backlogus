generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  email           String              @unique
  password        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  firstName       String?             @map("first_name") @db.VarChar(255)
  lastName        String?             @map("last_name") @db.VarChar(255)
  avatarUrl       String?             @map("avatar_url")
  timezone        String?             @default("UTC") @db.VarChar(50)
  apiCredentials  UserApiCredential[]
  userGames       UserGame[]
  userMovies      UserMovie[]
  userShows       UserShow[]
  userBooks       UserBook[]
  preferences     UserPreferences?

  @@map("users")
}

model Game {
  id               Int        @id @default(autoincrement())
  igdbId           Int        @unique @map("igdb_id")
  name             String
  coverUrl         String?    @map("cover_url")
  bannerUrl        String?    @map("banner_url")
  releaseDate      DateTime?  @map("release_date")
  genres           String[]   @default([])
  summary          String?
  platforms        String[]   @default([])
  developer        String?
  publisher        String?
  gameEngine       String?    @map("game_engine")
  esrbRating       String?    @map("esrb_rating")
  website          String?
  screenshots      String[]   @default([])
  franchise        String?
  rating           Float?
  totalRating      Float?     @map("total_rating")
  aggregatedRating Float?     @map("aggregated_rating")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  artworks         String[]   @default([])
  userGames        UserGame[]

  @@map("games")
}

model Movie {
  id               Int         @id @default(autoincrement())
  tmdbId           Int         @unique @map("tmdb_id")
  name             String
  originalTitle    String?     @map("original_title")
  coverUrl         String?     @map("cover_url")
  backdropUrl      String?     @map("backdrop_url")
  releaseDate      DateTime?   @map("release_date")
  genres           String[]    @default([])
  summary          String?
  director         String?
  cast             Json?
  runtime          Int?
  rating           Float?
  voteCount        Int?        @map("vote_count")
  budget           BigInt?
  revenue          BigInt?
  homepage         String?
  imdbId           String?     @map("imdb_id")
  tagline          String?
  status           String?
  originalLanguage String?     @map("original_language")
  popularity       Float?
  certification    String?
  trailerKey       String?     @map("trailer_key")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userMovies       UserMovie[]

  @@map("movies")
}

model Show {
  id               Int        @id @default(autoincrement())
  tmdbId           Int        @unique @map("tmdb_id")
  name             String
  originalName     String?    @map("original_name")
  coverUrl         String?    @map("cover_url")
  backdropUrl      String?    @map("backdrop_url")
  firstAirDate     DateTime?  @map("first_air_date")
  lastAirDate      DateTime?  @map("last_air_date")
  genres           String[]   @default([])
  summary          String?
  networks         String[]   @default([])
  creators         Json?
  cast             Json?
  seasons          Int?
  episodes         Int?
  episodeRuntime   Int?       @map("episode_runtime")
  rating           Float?
  voteCount        Int?       @map("vote_count")
  homepage         String?
  imdbId           String?    @map("imdb_id")
  tagline          String?
  status           String?    // "Ended", "Continuing", "Cancelled"
  type             String?    // "Scripted", "Documentary", etc.
  originalLanguage String?    @map("original_language")
  popularity       Float?
  certification    String?
  trailerKey       String?    @map("trailer_key")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userShows        UserShow[]

  @@map("shows")
}

model Book {
  id                 Int        @id @default(autoincrement())
  hardcoverId        Int        @unique @map("hardcover_id")
  title              String
  subtitle           String?
  alternativeTitles  String[]   @default([]) @map("alternative_titles")
  coverUrl           String?    @map("cover_url")
  releaseDate        DateTime?  @map("release_date")
  description        String?
  pages              Int?
  authors            Json?      // Array of author objects with name and role
  series             String?    // Primary series name
  seriesNames        String[]   @default([]) @map("series_names") // All series names
  seriesPosition     Float?     @map("series_position")
  genres             String[]   @default([])
  tags               String[]   @default([])
  moods              String[]   @default([])
  averageRating      Float?     @map("average_rating")
  hasAudiobook       Boolean?   @default(false) @map("has_audiobook")
  hasEbook           Boolean?   @default(false) @map("has_ebook")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  userBooks          UserBook[]

  @@map("books")
}

model UserBook {
  id              Int          @id @default(autoincrement())
  status          MediaStatus  @default(BACKLOG)
  quickReview     QuickReview? @map("quick_review")
  currentPage     Int?         @map("current_page")
  format          String?      // "Physical", "Digital", "Audio"
  notes           String?
  startedDate     DateTime?    @map("started_date")
  finishedDate    DateTime?    @map("finished_date")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  userId          Int          @map("user_id")
  bookId          Int          @map("book_id")
  book            Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("user_books")
}

model UserShow {
  id             Int         @id @default(autoincrement())
  status         MediaStatus @default(BACKLOG)
  quickReview    QuickReview? @map("quick_review")
  currentSeason  Int?        @map("current_season")
  currentEpisode Int?        @map("current_episode")
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         Int         @map("user_id")
  showId         Int         @map("show_id")
  show           Show        @relation(fields: [showId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
  @@map("user_shows")
}

model UserMovie {
  id             Int          @id @default(autoincrement())
  status         MediaStatus  @default(BACKLOG)
  quickReview    QuickReview? @map("quick_review")
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int          @map("user_id")
  movieId        Int          @map("movie_id")
  movie          Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("user_movies")
}

model UserGame {
  id             Int          @id @default(autoincrement())
  status         MediaStatus  @default(BACKLOG)
  quickReview    QuickReview? @map("quick_review")
  userPlatform   String?      @map("user_platform")
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int          @map("user_id")
  gameId         Int          @map("game_id")
  game           Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("user_games")
}

model UserApiCredential {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  apiProvider  String    @map("api_provider") @db.VarChar(50)
  apiKey       String?   @map("api_key")
  clientId     String?   @map("client_id")
  clientSecret String?   @map("client_secret")
  accessToken  String?   @map("access_token")
  refreshToken String?   @map("refresh_token")
  expiresAt    DateTime? @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, apiProvider])
  @@map("user_api_credentials")
}

enum MediaStatus {
  ACTIVE
  PAUSED
  COMPLETED
  DROPPED
  BACKLOG
}

enum QuickReview {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model UserPreferences {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  preferences Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
